{#
    This is the template that will generate the Dockerfile which will build the dataset.
-#}

# This file is automatically generated, do not modify.

FROM debian:stable-20230703-slim as downloader
# Downloads source codes from git, will later be used in the *-builder stages.
# We will always use fixed versions in order to have a consistent dataset (if it needs to be rebuilt).
# Builders do not depend on each other, this way, the build is parallelized.

RUN apt-get update && \
    apt-get install -y git

{% set and_ret = joiner(' && \\\n\t') -%}
RUN {% for p in projects %}{{ and_ret() }}git clone --depth 1 -b {{ p['branch'] }} {{ p['url'] }} {{ p['name'] }}{% endfor %}

# Begining of builders stages.

{% for p in projects -%}
FROM debian:stable-20230703-slim as {{ p['name'] }}-builder

#{{ p['name'] }} build dependencies.
RUN apt-get update && \
    apt-get install -y {{ p['dependencies']|join(' ') }}

# Copying source code and the list of flag to build with.
COPY --from=downloader {{ p['name'] }} {{ p['name'] }}
COPY flags.txt .

RUN mkdir /tmp/dbbuilder-output && cd {{ p['name'] }} && \
    {% set and_ret = joiner(' && \\\n\t') -%}
    {% for prebuild_instruction in p['pre-build'] %}{{ and_ret() }}{{ prebuild_instruction }}{% endfor -%}{{ and_ret() -}}
    while read flag || [ -n "$flag" ]; do \
    {% set and_ret = joiner(' && \\\n\t') -%}
    {% for build_instruction in p['build'] %}{{ and_ret() }}{{ build_instruction }}{% endfor -%}{{ and_ret() -}}
    {% set and_ret = joiner(' && \\\n\t') -%}
    {% for out in p['outfiles'] %}{{ and_ret() }}mv {{ out }} /tmp/dbbuilder-output/{{ out.split('/')[-1] }}_"$flag".bin{% endfor %} ; \
    done < ../flags.txt
    {##}
{%- endfor %}
# End of builder stages.

FROM alpine:latest as final
# Using alpine image for temporary data storage. Version does not matter.
USER 65534:65534

# Creating directories.
WORKDIR /dataset
{% set ret = joiner(' \\\n\t\t  ') -%}
RUN mkdir {% for p in projects %}{{ ret() }}{{ p['name'] }}{% endfor -%}
{##}
{% for p in projects %}
COPY --from={{ p['name'] }}-builder /tmp/dbbuilder-output/* {{ p['name'] -}}
{% endfor %}